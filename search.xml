<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2020%2F07%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用GitHub Pages 与 Hexo 搭建个人博客站点（二）]]></title>
    <url>%2F2019%2F01%2F06%2FBuild-Blog-2%2F</url>
    <content type="text"><![CDATA[使用GitHub Pages 与 Hexo 搭建个人博客站点（二） 前言前一篇文章使用GitHub Pages 与 Hexo 搭建个人博客站点（一）介绍了如何使用 Hexo 从零开始搭建自己的博客站点，目前搭建起来的博客站点已经基本满足大部分同学的需要了，像是一些对外观要求极高的同学或许还是不满足于现状，想要定制更多的功能。本篇文章将继续介绍对 Next 主题的各种魔改。 开启版权声明在 next 主题目录的配置文件中修改如下部分:1234567# Creative Commons 4.0 International License.# https://creativecommons.org/share-your-work/licensing-types-examples# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: license: by-nc-sa sidebar: false post: true 修改后的效果如下： 使用 GitTalk 实现评论功能GitTalk 评论功能的基本原理是在 GitHub 上以开发者身份创建一个 GitHub Application 之后配置 Next，然后每新建一篇文章都会在 GitHub 代码库的 Issue 中新建一条 issue 用于存储该文章的评论内容。下面就让我们开始动手吧。。。 第一步，注册 OAuth application 传送门 其中 Application name 可以自取；Homepage URL 需要填写博客的 URL 地址，如：https://yourName.github.io/； Application description Authorization callback URL 同样填写博客的 URL 第二步，获取 Client ID 和 Client Secret 进入 GitHub，依次点击头像 –&gt; Settings –&gt; Developer settings 然后就可以看到刚刚创建的 OAuth Applcation 点击该App，在新的页面中就可以看到 Client ID 和 Client Secret，如下图： 第三步，修改 Next 配置文件在 next 目录下的 _config.yml 文件中找到 gitalk 部分，做如下配置 1234567891011# Gitalk# Demo: https://gitalk.github.io# Reference: https://asdfv1929.github.io/2018/01/20/gitalk/, https://liujunzhou.cn/2018/8/10/gitalk-error/#moregitalk: enable: true github_id: dockiHan # Github repo owner repo: dockiHan.github.io # Repository name to store issues. client_id: # 第二步中的 Client ID client_secret: #第二步中的 Client Secret admin_user: # 第二步创建Applicationd时用的GitHub 的 userName distraction_free_mode: true # Facebook-like distraction free mode 第四步，修改 layout/_partials/comments.swig添加以下内容 123&#123;% elseif theme.gitalk.enable %&#125; &lt;div id="gitalk-container"&gt;&lt;/div&gt; &lt;link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"&gt; 第五步，在 layout/_third-party/comments/目录下增加文件gitalk.swig 已存在的不必再新建，检查一下文件内容是否一致添加以下的内容 123456789101112131415161718192021&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname %&#125; &#123;% if theme.gitalk.enable %&#125; &#123;% if page.comments %&#125; &lt;script src="https://unpkg.com/gitalk/dist/gitalk.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; const gitalk = new Gitalk(&#123; clientID: '&#123;&#123;theme.gitalk.clientID&#125;&#125;', clientSecret: '&#123;&#123;theme.gitalk.clientSecret&#125;&#125;', repo: '&#123;&#123;theme.gitalk.repo&#125;&#125;', owner: '&#123;&#123;theme.gitalk.owner&#125;&#125;', admin: '&#123;&#123;theme.gitalk.admin&#125;&#125;'.split(','), id: '&#123;&#123; page.date &#125;&#125;', #这个是基于文章时间创建 Issues ，默认是以文章标题作为标签创建 Issues 会导致长标题初始化失败。 pagerDirection: '&#123;&#123;theme.gitalk.pagerDirection&#125;&#125;', // facebook-like distraction free mode distractionFreeMode: false &#125;) gitalk.render('gitalk-container') &lt;/script&gt; &#123;% endif %&#125; &#123;% endif %&#125;&#123;% endif %&#125; 第六步，打开 layout/_third-party/comments/index.swig添加以下内容 1&#123;% include 'gitalk.swig' %&#125; 第七步，将本地 build 分支的修改同步到远程分支这里使用的 git 命令在上一篇文章中已经提到，不再赘述，还不会的小伙伴可学习google或百度 git 学习一下 第八步，发布部署最新版本 12hexo cleanhexo d -g 第九步，浏览器访问博客站点，在每篇文章最下方会有GitHub评论区，登录GitHub账号并初始化评论区 使用 LeanCloud 实现文章阅读数计数功能 第一步，去 LeanCloud 注册账户并创建应用，如下图。注意勾选“开发版”否则就要付费了哟，应用名称可以随意取，图中的“blog” 就是我当时创建的应用。 第二步，进入应用设置界面，新建一个新的 Class 用于计数。在设置界面先点击“存储”按钮，然后点击“创建 Class”按钮，就会出现下图所示的界面，Class 名称可以随意取（假设名为Count），注意权限设置时勾选最后一项“无限制” 第三步，配置 next 主题的 _config.yml 文件。首先在 LeanCloud 应用设置页面点击“设置“ –&gt; “应用Key”获取该应用的 App ID 和 App Key，如下图： 然后打开 next 目录下的 _config.yml 文件，找到 leancloud_visitors 属性做如下配置：123456789leancloud_visitors: enable: true app_id: 这里填上图中的App ID #&lt;app_id&gt; app_key: 这里填上图中的App Key #&lt;app_key&gt; # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security # If you don't care about security in lc counter and just want to use it directly # (without hexo-leancloud-counter-security plugin), set the `security` to `false`. security: false betterPerformance: false 第四步，使用 Git 命令更新远端的 build 分支，然后使用 hexo 命令发布最新版本。 设置背景动画 第一步，打开 next 主题配置文件中的 motion 属性 1234# Use velocity to animate everything.motion: enable: true async: false 第二步，打开 canvas_nest 动画效果 123456789# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest: enable: true onmobile: true # display on mobile or not color: '0,0,0' # RGB values, use ',' to separate opacity: 0.65 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 99 # the number of lines 第三步，安装依赖，https://github.com/theme-next/theme-next-canvas-nest 修改页面透明度由于 next 主题默认的背景是不透明的，如果我们设置的有 canvas_nest 和 canvas_three 等3D动画效果，则会被文章界面遮住，可以通过 CSS 样式来修改站点的页面透明度。 文章部分文件位置 ~Hexo根目录/themes/next/source/css/_schemes/Gemini/index.styl（“ - ” 表示删除该行，或者注释掉该行， “ + ” 表示添加该行代码，0.7 表示透明度） 12345678// Post &amp; Comments blocks..post-block &#123; padding: $content-desktop-padding;- background: white;+ background: rgba(255,255,255,0.7); box-shadow: $box-shadow-inner; border-radius: $border-radius-inner;&#125; 阅读全文按钮文件位置 ~Hexo根目录/themes/next/source/css/_variables/Pisces.styl 12345678// Button $btn-default-radius = 2px- $btn-default-bg = white+ $btn-default-bg = rgba(255,255,255,0.5) $btn-default-color = $text-color $btn-default-border-color = $text-color $btn-default-hover-color = white $btn-default-hover-bg = $black-deep 分页部分文件位置 ~Hexo根目录/themes/next/source/css/_schemes/Gemini/index.styl 12345678910111213// Pagination..pagination &#123; .prev, .next, .page-number &#123; margin-bottom: initial; top: initial; &#125; margin: sboffset 0 0;- background: white;+ background: rgba(255,255,255,0.7); box-shadow: $box-shadow; border-radius: $border-radius; padding: 10px 0 10px;&#125; 评论区部分文件位置 ~Hexo根目录/themes/next/source/css/_schemes/Gemini/index.styl 12345678910// Comments blocks..comments &#123; padding: $content-desktop-padding; margin: initial; margin-top: sboffset;- background: white;+ background: rgba(255,255,255,0.7); box-shadow: $box-shadow; border-radius: $border-radius;&#125; 侧栏菜单界面文件位置 ~Hexo根目录/themes/next/source/css/_schemes/Pisces/_layout.styl 12345678910111213141516171819202122232425.header-inner &#123; position: absolute; top: 0; overflow: hidden; padding: 0; width: $sidebar-desktop;- background: white;+ background: rgba(255,255,255,0.7); box-shadow: $box-shadow-inner; border-radius: $border-radius-inner; +desktop-large() &#123; .container &amp; &#123; width: $sidebar-desktop; &#125; &#125; +tablet() &#123; position: relative; width: auto; border-radius: initial; &#125; +mobile() &#123; position: relative; width: auto; border-radius: initial; &#125;&#125; 个人资料界面文件位置 ~Hexo根目录/themes/next/source/css/_schemes/Pisces/_sidebar.styl 123456789101112131415.sidebar-inner &#123;//padding: 20px 10px 0; box-sizing: border-box; width: $sidebar-desktop; color: $text-color;- background: white;+ background: rgba(255,255,255,0.7); box-shadow: $box-shadow; border-radius: $border-radius; if (hexo-config('motion.enable') and hexo-config('motion.transition.sidebar')) &#123; opacity: 0; &#125; &amp;.affix &#123; position: fixed; top: $sidebar-offset; &#125; 特别感谢 https://liujunzhou.top/2018/8/16/page-background/ 前辈的总结 开启 fancybox 实现文章图片的放大功能 第一步，进入 next 主题的配置文件，开启 fancybox 配置 12345# Fancybox. There is support for old version 2 and new version 3.# Please, choose only any one variant, do not need to install both.# For install 2.x: https://github.com/theme-next/theme-next-fancybox# For install 3.x: https://github.com/theme-next/theme-next-fancybox3fancybox: true 第二步，在配置文件中配置 jquery 和 fancybox 依赖的 js 和 css 12345678910111213141516171819202122232425# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 # Example: # jquery: //cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js # jquery: //cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js jquery: //cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox # Example: # fancybox: //cdn.jsdelivr.net/npm/fancybox@3.0.0/dist/js/jquery.fancybox.pack.js # fancybox_css: //cdn.jsdelivr.net/npm/fancybox@3.0.0/dist/css/jquery.fancybox.min.css # fancybox: //cdnjs.cloudflare.com/ajax/libs/fancybox/3.2.5/jquery.fancybox.min.js # fancybox_css: //cdnjs.cloudflare.com/ajax/libs/fancybox/3.2.5/jquery.fancybox.min.css fancybox: //cdn.jsdelivr.net/npm/fancybox@3.0.0/dist/js/jquery.fancybox.pack.js fancybox_css: //cdn.jsdelivr.net/npm/fancybox@3.0.0/dist/css/jquery.fancybox.min.css 第三步，安装 fancybox 依赖，根据配置文件你选择的 fancybox 版本去对应的 github 安装依赖。For install 2.x: https://github.com/theme-next/theme-next-fancybox For install 3.x: https://github.com/theme-next/theme-next-fancybox3 个人建议使用3.x，我在搭建站点时就是选择的3.x版本 第四步，使用 Git 命令更新 build 分支，然后使用 hexo 命令发布最新版本 本人在搭建站点时所做的个性化配置就是这么多啦，个人认为基本满足了美观+实用的需求。最终的效果可见：https://dockihan.github.io/ 有任何问题欢迎来评论区讨论哟～ 预祝大家成功搭建起自己的博客站点！～]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用GitHub Pages 与 Hexo 搭建个人博客站点（一）]]></title>
    <url>%2F2018%2F12%2F27%2FBuild-Blog-1%2F</url>
    <content type="text"><![CDATA[使用GitHub Pages 与 Hexo 搭建个人博客站点（一） 前言谨以此文记录本人的博客建站历程，期间参考了众多前辈的建站经验，在后续正文中会做相关的引用说明。 作为一枚拖延症与懒惰症的晚期患者，最近突发奇想，想要写点东西来记录自己的学习点滴，于是乎开始了个人博客的踩坑之路…… 本教程所涉及的各种工具及相应的版本说明 Requirements：操作系统： MacOS Git: git version 2.15.2 (Apple Git-101.1) NodeJs: 10.4.1 Npm: 6.5.0 Hexo: 3.8.0 Next: v6.6.0 (直接git pull最新版) 起航 首先去GitHub新建一个代码仓库，名称必须是userName(gitHub用户名).github.io 注意勾选 Initialize this repository with a README 进入刚刚新建的代码库，新建一个远程分支（假设新分支名称为build）用于存储建站所需的内容。（由于GitHub Pages只能自动识别master分支，因此代码库的master分支只能用来存放博客部署的相关内容而不能存放其他内容，如果master分支放了额外内容则GitHub Pages会在生成页面时报错，导致个人主页404。我在这里被坑了好多次才顺利通过） 配置 GitHub SSL 执行 ssh-keygen -t rsa -C &quot;&lt;密钥值&gt;&quot; （&lt;&gt;内表示可以自由填写的内容） 连按三次回车键直至生成密钥 SSH KEY 生成之后会默认保存在 ~/.ssh 目录中，打开这个目录，cat 一下 id_rsa.pub 文件，复制全部内容，即复制密钥。 打开 GitHub，依次点击 头像 –&gt; Settings –&gt; SSH and GPG keys –&gt; Add SSH key，将复制的密钥粘贴到 key 输入框，最后点击 Add Key ，SSH KEY 配置成功，如下图所示： 在本地执行 git pull 拉下代码库： 拉取代码库git pull https://github.com/userName/userName.github.io.git 新建本地分支buildgit checkout -b build 为本地的build分支设置上游分支，设置为远程的build分支git branch --set-upstream-to origin build 在 GitHub 中进入代码库，在Settings中找到 GitHub Pages 将 Source 设置为 master 分支（如图）。然后在下面选择一个主题（可选操作，对后续影响不大）。 注意时刻保持远程仓库与本地仓库的一致性，git 产生分歧后将会比较难处理。（后续操作中一定要保证 build 分支的一致性， master 分支在这里作为博客部署分支，可以不用在本地手动 git pull，后面介绍的 hexo-deployer-git 会去处理 master 分支）如果远程仓库有了改变，在本地的仓库执行 git pull 拉取最新的内容如果本地仓库有了改变， 依次执行 git add &lt;your file name&gt; git commit -m &quot;&lt;your commit message&gt;&quot; 和 git push同时注意当前的本地分支，在本地 git 仓库会都有所标注（如图所示，当前操作的分支即是本地的build分支） 切换当前分支可使用命令git checkout &lt;branch name&gt;其他有关Git的操作这里就不再赘述，可以自行 Google 或者百度 安装 Hexo 以及相关依赖 安装 Node JS 官方传送门 安装 Hexo npm install -g hexo-cli 如果 npm 执行较慢可先更换一下镜像。 使用临时源（阿里源）npm --registry https://registry.npm.taobao.org install -g hexo-cli 其他 npm 镜像相关操作可参见https://www.jianshu.com/p/f311a3a155ff 在 build 分支下初始化hexo hexo init hexo 进入hexo目录，安装相关依赖 123cd hexonpm installhexo generate 启动 hexo 本地 server hexo server 浏览器访问 lcalhost:4000 即可看到初始化的博客页面了（按 Ctrl + C 可停止 hexo 本地服务器） 配置 hexo 配置文件进入 hexo 目录，打开 _config.yml 配置文件做如下配置 123456789101112131415161718192021222324252627# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Docki's Homesubtitle: 非淡泊无以明志，非宁静无以致远description: 走在求知的路上keywords:author: dockilanguage: zh-CNtimezone: Asia/Shanghai# URL## If your site is put in a subdirectory,## set url as 'http://yoursite.com/child' and root as '/child/'url: https://dockiHan.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/yourName/yourName.github.io.git branch: master message: hexo depoly 执行下面的命令，安装 hexo-deployer-git 插件，快速把代码托管到 GitHub 上npm install hexo-deployer-git（安装速度慢可更换npm镜像，–见前文） 执行下面的代码命令，将 hexo 项目托管到 GitHub 上，Hexo 会通过上面配置文件中的 # Deployment 相关配置进行部署。 12hexo clean //清空当前缓存hexo d -g //d 为deploy的缩写，g为generate的缩写，表示生成静态页面并部署 至此一个简单的个人博客站点就搭建完成了，浏览器访问https://userName.github.io就可以看到已经部署的页面了 特别鸣谢各位探路前辈： 传送门1 传送门2 进阶目前肯定会有很多小伙伴不满足于现状，想要自己的博客站点变得更酷一些、更炫一点，最简单的方法就是去找一些前端大神实现好的主题，然后在此基础上做一些个性化的定制，这里就以人气值最高的Next主题为例…… 下载 Next 主题官方传送门：GitHub这里推荐使用 git 方式安装，后续更新非常方便 修改全局配置文件（ hexo 目录下的 _config.yml ）将 Extension 片段的 Theme 改为 next 如下 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 修改 Next 主题的配置文件（ themes/next/ 目录下的 _config.yml ） 配置页脚部分 1234567891011121314151617181920212223footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2018 # Icon between year and copyright info. icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons # `heart` is recommended with animation in red (#ff0000). name: heart # If you want to animate the icon, set it to true. animated: false # Change the color of icon, using Hex Code. color: "#808080" # If not defined, will be used `author` from Hexo main config. copyright: docki # ------------------------------------------------------------- powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: true 配置浏览器导航栏上面的网页图标。其中的/images路径为：next目录下的/source/images 12345favicon: small: /images/font_logo.png medium: /images/font_logo.png apple_touch_icon: /images/font_logo.png safari_pinned_tab: /images/logo.svg 配置菜单栏 123456789101112131415161718192021222324# ---------------------------------------------------------------# Menu Settings# --------------------------------------------------------------- # When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is c## Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.# External url should start with http:// or https:// .menu: home: / || home categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive about: /about/ || user #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons / item badges.menu_settings: icons: true badges: false 填写完配置文件后还需使用 hexo new page 新建菜单选项对应的页面，否则点击菜单按钮时会报 404 错误。。。 123hexo new page 'categories'hexo new page 'tags'hexo new page 'about' 此时 source 目录下会新建有三个目录 categories， tags， about 如下图： 在每个目录下都会生成有一个 index.md 文件，之后我们需要给每个 index.md 文件添加一个 type 字段，然后填写对应的类型。如下图所示： tags 和 about 对应的 index.md 与上图修改方式相同。 选择Pisces样式 123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 配置左侧导航栏中的头像(此处/images路径同样是next目录下/source/images，自备图像并放到这个路径下) 123456789101112# Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/font_logo.png # If true, the avatar would be dispalyed in circle. rounded: true # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 0.8 # If true, the avatar would be rotated with the cursor. rotated: false 安装搜索插件 在 hexo 目录下执行 1npm install hexo-generator-searchdb 打开 hexo 目录下的全局配置文件 _config.yml 在最下方添加如下配置： 12345# Search Barpath: search.xmlfield: postformat: htmllimit: 10000 打开 next 目录下的主题配置文件，找到 local_search 属性，开启本地搜索功能： 1234567891011# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 # unescape html strings to the readable one unescape: false 发布文章 在 hexo 目录下执行 hexo new &quot;Hello Hexo&quot; 将会创建一篇名为 Hello Hexo 的文章，文章会存储在 hexo/source/_posts/ 目录下。进入该目录打开 Hello-Hexo.md 文件，为其添加标签和分类123456---title: Hello Hexodate: 2018-12-27 11:57:40tags: [Hexo]categories: [Hexo]--- 然后可以随意写一些内容（需要使用MarkDown语法），之后可以先启动本地的 hexo 服务器，查看最新的修改内容是否成功显示。执行 hexo server 然后用浏览器访问 http://localhost:4000 可以在文章的任意部位添加下面的代码，发布后就会变成“阅读全文”按钮1&lt;!--more--&gt; 部署最新的修改内容 在 hexo 目录下依次执行： 12hexo cleanhexo d -g 然后浏览器访问https://userName.github.io 查看你的最新修改吧！ 将最新配置同步到 git 远程代码仓库 注意此时需要保持在 build 分支，先执行git status 查看本地分支与远程分支的差异（比如更改了哪些、新加了哪些、删除了哪些等等）然后执行以下命令提交最新修改的文件： 1234git add &lt;your modified filenames&gt; //执行多次git add 直到把所有改变都add完git status //查看是否已经处理完所有分歧git commit -m "&lt;your commit message&gt;" //提交commit请求git push //将commit同步到远程仓库 到此为止，一个看得过去的博客站点就算初步建立了，基本可以满足喜欢写写东西记录生活、写写笔记记录学习经历的同学了。。如果还想做一些个性化的修改可以期待下一篇文章使用GitHub Pages 与 Hexo 搭建个人博客站点（二）]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
